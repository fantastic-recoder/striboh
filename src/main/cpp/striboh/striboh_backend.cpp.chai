global theRunNo=0;

def stribohIdlServantInit() {
   stribohIdlSetRuns(2);// set tree visitor runs
}

def stribohIdlServantBeginRun(pRun){
   ++theRunNo;
   if(theRunNo==1) {
      addCode("#include <string>\n");
      addCode("#include <striboh/stribohBaseInterface.hpp>\n");
      addCode("#include <striboh/stribohBaseEMessageType.hpp>\n");
      addCode("#include <striboh/stribohBaseParameterList.hpp>\n");
      addCode("\n");
   }
}

def concatPrefix(pDepth) {
   var myPrefix="";
   for(var ii=0; ii<pDepth; ++ii){
      myPrefix=myPrefix+"\t";
   }
   return myPrefix;
}

def concatStringList(pList) {
   var myRetVal="";
   for(var ii=0; ii<pList.size(); ++ii){
      if(ii>0){
          myRetVal=myRetVal+",";
      }
      myRetVal=myRetVal+"\""+pList[ii]+"\"";
   }
   return myRetVal;
}

global theModuleDepth = 0;
global theModuleNames = [];

def stribohIdlServantBeginModule(pModuleName) {
   if(theRunNo==1) {
       var myPrefix=concatPrefix(theModuleDepth);
       addCode("${myPrefix}namespace ${pModuleName} {\n\n");
       theModuleNames.push_back(pModuleName);
   }
   ++theModuleDepth;
}

def stribohIdlServantEndModule(pModuleName) {
   --theModuleDepth;
   if(theRunNo==2) {
       var myPrefix=concatPrefix(theModuleDepth);
       addCode("\n${myPrefix}}\n");
   }
}

def stribohIdlServantBeginInterface(pInterfaceName) {
   var myPrefix=concatPrefix(theModuleDepth);
   if(theRunNo==1) {
       addCode("${myPrefix}class ${pInterfaceName} : public striboh::base::Object {\n");
   }
   if(theRunNo==2) {
       var myModuleList = concatStringList(theModuleNames);
       addCode("${myPrefix}\t striboh::base::Interface mInterface{\n");
       addCode("${myPrefix}\t\t *this,\n");
       print("Module list:${myModuleList}");
       addCode("${myPrefix}\t\t {${myModuleList}},\n");
       addCode("${myPrefix}\t\t striboh::base::InterfaceName{\"${pInterfaceName}\"},\n");
       addCode("${myPrefix}\t\t {\n");
   }
   ++theModuleDepth;
}

def stribohIdlServantEndInterface(pInterfaceName) {
   --theModuleDepth;
   var myPrefix=concatPrefix(theModuleDepth);
   if(theRunNo==2) {
       addCode("${myPrefix}\t\t }\n");
       addCode("${myPrefix}\t };\n");
       addCode("\n${myPrefix}};\n");
   }
}

def stribohTypeToCpp(pStribohType) {
    if(pStribohType == "STRING") {
        return "std::string";
    }
    throw (runtime_error("Unknown striboh type ${pStribohType}"));
}

global pParNo = -1;
global theCurrentMethodCall="";

def stribohIdlServantBeginMethod(pMethodName,pReturnType) {
   pParNo = 0;
   if(theRunNo==1) {
       var myPrefix=concatPrefix(theModuleDepth);
       var myCppType=stribohTypeToCpp(pReturnType);
       addCode("\n${myPrefix}virtual ${myCppType} ${pMethodName}(");
       theCurrentMethodCall="${pMethodName}(";
   }
   if(theRunNo==2) {
       var myPrefix=concatPrefix(theModuleDepth+1);
       addCode("${myPrefix}\t striboh::base::Method{\"${pMethodName}\",\n");
       addCode("${myPrefix}\t\t striboh::base::ParameterDescriptionList{\n");
   }
}

def stribohIdlServantEndMethod(pMethodName) {
   if(theRunNo==1) {
      addCode(" ) = 0;\n");
   }
   if(theRunNo==2) {
      var myPrefix=concatPrefix(theModuleDepth+1);
      addCode("${myPrefix}\t\t },\n");
      addCode("${myPrefix}\t\t [this](const striboh::base::Message &pIncoming,striboh::base::Context pCtx) {\n");
      addCode("${myPrefix}\t\t\t auto myRetVal=${theCurrentMethodCall}\n");
      addCode("${myPrefix}\t\t\t \"Bla!\");\n");
      addCode("${myPrefix}\t\t\t return striboh::base::Message(striboh::base::Value{myRetVal},getLog());\n");
      addCode("${myPrefix}\t\t },\n");
      addCode("${myPrefix}\t\t getLog()\n");
      addCode("${myPrefix}\t }\n");
   }
}

def stribohIdlServantBeginParameter(pParameterName,pType) {
   if(theRunNo==1) {
       var myCppType=stribohTypeToCpp(pType);
       if(pParNo==0) {
          addCode(" const ${myCppType} & ${pParameterName}");
       } else {
          addCode(", const ${myCppType} & ${pParameterName}");
       }
   }
   pParNo = pParNo+1;
}


global theRunNo=0;

def stribohIdlServantInit() {
   stribohIdlSetRuns(2);// set tree visitor runs
}

def stribohIdlServantBeginRun(pRun){
   ++theRunNo;
   if(theRunNo==1) {
      addCode("#include <string>\n");
      addCode("#include <vector>\n");
      addCode("#include <striboh/stribohBaseEMessageType.hpp>\n");
      addCode("#include <striboh/stribohBaseParameterList.hpp>\n");
      addCode("#include <striboh/stribohBaseMethod.hpp>\n");
      addCode("#include <striboh/stribohBaseMessage.hpp>\n");
      addCode("#include <striboh/stribohBaseInterface.hpp>\n");
      addCode("#include <striboh/stribohBaseServantBase.hpp>\n");
      addCode("\n");
   }
}

def concatPrefix(pDepth) {
   var myPrefix="";
   for(var ii=0; ii<pDepth; ++ii){
      myPrefix=myPrefix+"\t";
   }
   return myPrefix;
}

def concatStringList(pList) {
   var myRetVal="";
   for(var ii=0; ii<pList.size(); ++ii){
      if(ii>0){
          myRetVal=myRetVal+",";
      }
      myRetVal=myRetVal+"\""+pList[ii]+"\"";
   }
   return myRetVal;
}

global theModuleDepth = 0;
global theModuleNames = [];

def stribohIdlServantBeginModule(pModuleName) {
   if(theRunNo==1) {
       var myPrefix=concatPrefix(theModuleDepth);
       addCode("${myPrefix}namespace ${pModuleName} {\n\n");
       theModuleNames.push_back(pModuleName);
   }
   ++theModuleDepth;
}

def stribohIdlServantEndModule(pModuleName) {
   --theModuleDepth;
   if(theRunNo==2) {
       var myPrefix=concatPrefix(theModuleDepth);
       addCode("\n${myPrefix}}\n");
   }
}

global theMethodNo;

def stribohIdlServantBeginInterface(pInterfaceName) {
   theMethodNo = 0;
   var myPrefix=concatPrefix(theModuleDepth);
   if(theRunNo==1) {
       addCode("${myPrefix} class ${pInterfaceName} : public striboh::base::ServantBase {\n");
       addCode("${myPrefix} public:\n");
   }
   if(theRunNo==2) {
       var myModuleList = concatStringList(theModuleNames);
       addCode("\n");
       addCode("${myPrefix}\t virtual striboh::base::Interface& getInterface() override { return mInterface; }\n\n");
       addCode("${myPrefix} private:\n");
       addCode("${myPrefix}\t striboh::base::Interface mInterface{\n");
       addCode("${myPrefix}\t\t *this,\n");
       print("Module list:${myModuleList}");
       addCode("${myPrefix}\t\t {${myModuleList}},\n");
       addCode("${myPrefix}\t\t striboh::base::InterfaceName{\"${pInterfaceName}\"},\n");
       addCode("${myPrefix}\t\t {\n");
   }
   ++theModuleDepth;
}

def stribohIdlServantEndInterface(pInterfaceName) {
   --theModuleDepth;
   var myPrefix=concatPrefix(theModuleDepth);
   if(theRunNo==2) {
       addCode("${myPrefix}\t\t }\n");
       addCode("${myPrefix}\t };\n");
       addCode("\n${myPrefix}};\n");
   }
}

def stribohTypeToCpp(pStribohType) {
    if(pStribohType == "STRING") {
        return "std::string";
    }
    if(pStribohType == "INT") {
        return "int64_t";
    }
    throw (runtime_error("Unknown striboh type ${pStribohType}"));
}

def stribohTypeToTypeName(pStribohType) {
    if(pStribohType == "STRING") {
        return "striboh::base::ETypes::K_STRING";
    }
    if(pStribohType == "INT") {
        return "striboh::base::ETypes::K_INT";
    }
    throw (runtime_error("Unknown striboh type ${pStribohType}"));
}

global theParNo = -1;
global theLambdaParameterList;

def stribohIdlServantBeginMethod(pMethodName,pReturnType) {
   theParNo = 0;
   theLambdaParameterList = "";
   if(theRunNo==1) {
       var myPrefix=concatPrefix(theModuleDepth);
       var myCppType=stribohTypeToCpp(pReturnType);
       addCode("\n${myPrefix} virtual ${myCppType} ${pMethodName}(");
   }
   if(theRunNo==2) {
       var myPrefix=concatPrefix(theModuleDepth+1);
       if(theMethodNo>0) {
           addCode("${myPrefix}\t ,\n");
       }
       addCode("${myPrefix}\t striboh::base::Method{\"${pMethodName}\",\n");
       addCode("${myPrefix}\t\t striboh::base::ParameterDescriptionList{\n");
       addCode("${myPrefix}\t\t\t {\n");
   }
}

def stribohIdlServantEndMethod(pMethodName) {
   if(theRunNo==1) {
      addCode(" ) = 0;\n");
   }
   if(theRunNo==2) {
      var myPrefix=concatPrefix(theModuleDepth+1);
      addCode("${myPrefix}\t\t\t }\n");
      addCode("${myPrefix}\t\t },\n");
      addCode("${myPrefix}\t\t [this](const striboh::base::Message &pIncoming,striboh::base::Context pCtx) {\n");
      addCode("${myPrefix}\t\t\t auto myRetVal=${pMethodName}(\n");
      addCode(theLambdaParameterList);
      addCode("${myPrefix}\t\t\t );\n");
      addCode("${myPrefix}\t\t\t return striboh::base::Message(striboh::base::Value{myRetVal},getLog());\n");
      addCode("${myPrefix}\t\t },\n");
      addCode("${myPrefix}\t\t getLog()\n");
      addCode("${myPrefix}\t }\n");
   }
   theMethodNo += 1;
}

def stribohIdlServantBeginParameter(pParameterName,pType) {
   var myCppType=stribohTypeToCpp(pType);
   if(theRunNo==1) {
       if(theParNo>0) {
          addCode(", ");
       }
      addCode("const ${myCppType} & ${pParameterName}");
   }
   if(theRunNo==2) {
       var myPrefix = concatPrefix(theModuleDepth+1);
       var myParameterTypeName = stribohTypeToTypeName(pType);
       if(theParNo>0) {
          theLambdaParameterList += "${myPrefix}\t\t\t ,\n";
          addCode("${myPrefix}\t\t\t\t\t ,\n");
       }
      theLambdaParameterList += "${myPrefix}\t\t\t pIncoming.getParameters()[${theParNo}].getValue().get<${myCppType}>()\n";
      addCode("${myPrefix}\t\t\t\t\t striboh::base::ParameterDescription{striboh::base::EDirection::K_IN, ${myParameterTypeName}, \"${pParameterName}\"}\n");
   }
   theParNo = theParNo+1;
}

